<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Abort" xml:space="preserve">
    <value>Abort</value>
  </data>
  <data name="Aborted" xml:space="preserve">
    <value>aborted</value>
  </data>
  <data name="ADumpFile" xml:space="preserve">
    <value>A dump file</value>
  </data>
  <data name="AlreadyExists" xml:space="preserve">
    <value>already exists</value>
  </data>
  <data name="AutoScanTagRunning" xml:space="preserve">
    <value>Auto scan Tag is running</value>
  </data>
  <data name="AutoScanTagStopped" xml:space="preserve">
    <value>Auto scan tag stopped</value>
  </data>
  <data name="BtnDeleteKeyFileContent" xml:space="preserve">
    <value>Delete Key File</value>
  </data>
  <data name="BtnEditKeyFileContent" xml:space="preserve">
    <value>Edit Key File</value>
  </data>
  <data name="BtnNewKeyFileContent" xml:space="preserve">
    <value>New Key File</value>
  </data>
  <data name="btnOpenDumpAContent" xml:space="preserve">
    <value>Open Dump A</value>
  </data>
  <data name="btnOpenDumpBContent" xml:space="preserve">
    <value>Open Dump B</value>
  </data>
  <data name="BtnSelectDumpContent" xml:space="preserve">
    <value>Select Source Dump</value>
  </data>
  <data name="btnStartMappingAndReadTagContent" xml:space="preserve">
    <value>Start decode &amp; Read tag</value>
  </data>
  <data name="BtnWriteDumpContent" xml:space="preserve">
    <value>Write Dump</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CkACsContent" xml:space="preserve">
    <value>Use these Access Conditions for all sectors</value>
  </data>
  <data name="CkEnableBlock0WritingContent" xml:space="preserve">
    <value>Advanced: Enable writing to manufacturer block</value>
  </data>
  <data name="ckEnablePeriodicTagScanContent" xml:space="preserve">
    <value>Enable Periodic Tag AutoScan</value>
  </data>
  <data name="ckEnablePeriodicTagScanTooltip" xml:space="preserve">
    <value>checks if there is a new tag on the tag reader every 3 seconds</value>
  </data>
  <data name="Cloning" xml:space="preserve">
    <value>cloning</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CompareDumps" xml:space="preserve">
    <value>Compare Dumps</value>
  </data>
  <data name="Different" xml:space="preserve">
    <value>Different</value>
  </data>
  <data name="DoneWithErrors" xml:space="preserve">
    <value>done with errors</value>
  </data>
  <data name="DoYouWantToReUseThisDump" xml:space="preserve">
    <value>Do you want to re-use this dump ?</value>
  </data>
  <data name="DumpExisting" xml:space="preserve">
    <value>Dump file already existing</value>
  </data>
  <data name="DumpFileFilter" xml:space="preserve">
    <value>Dump Files|*.dump;*.mfd;*.dmp;*.img;*.nfc;*.txt;*.bin|All Files|*.*</value>
  </data>
  <data name="DumpWindowTitle" xml:space="preserve">
    <value>Dump</value>
  </data>
  <data name="EditAddKeyFile" xml:space="preserve">
    <value>EDIT/ADD KEY FILE</value>
  </data>
  <data name="EditAnalyzeDumpFile" xml:space="preserve">
    <value>EDIT/ANALYZE
DUMP FILE</value>
  </data>
  <data name="EditDump" xml:space="preserve">
    <value>Edit Dump</value>
  </data>
  <data name="EditKeyFileWindowTitle" xml:space="preserve">
    <value>Edit Key File</value>
  </data>
  <data name="FactoryFormat" xml:space="preserve">
    <value>Factory Format</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>finished</value>
  </data>
  <data name="HelpAndInfo" xml:space="preserve">
    <value>HELP/INFO</value>
  </data>
  <data name="Identical" xml:space="preserve">
    <value>Identical</value>
  </data>
  <data name="KeyFilesFilter" xml:space="preserve">
    <value>Key Files|*.keys|All Files|*.*</value>
  </data>
  <data name="MapKeyToSectorWindowTitle" xml:space="preserve">
    <value>Map Keys</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="MWT" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\MWT.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="NeedSelectDumpKeyFileSource" xml:space="preserve">
    <value>You need to select one source dump (MWT file format)</value>
  </data>
  <data name="NeedToSelectOneKeyFile" xml:space="preserve">
    <value>You need to select at least one key file</value>
  </data>
  <data name="NewUIDFound" xml:space="preserve">
    <value>new UID Found</value>
  </data>
  <data name="NoTag" xml:space="preserve">
    <value>no tag</value>
  </data>
  <data name="NoTagDetectedOnReader" xml:space="preserve">
    <value>No Tag detected on reader</value>
  </data>
  <data name="OpenDump" xml:space="preserve">
    <value>Open Dump</value>
  </data>
  <data name="PleaseRestartAsAdmin" xml:space="preserve">
    <value>Please restart Mifare Windows Tool as Administrator</value>
  </data>
  <data name="rbHaltOnErrorContent" xml:space="preserve">
    <value>Halt on errors</value>
  </data>
  <data name="rbTolerateOnErrorContent" xml:space="preserve">
    <value>Tolerate errors</value>
  </data>
  <data name="RbUseKeyAContent" xml:space="preserve">
    <value>Use Key A</value>
  </data>
  <data name="RbUseKeyBContent" xml:space="preserve">
    <value>Use Key B</value>
  </data>
  <data name="ReadTag" xml:space="preserve">
    <value>READ TAG</value>
  </data>
  <data name="SaveDumpAs" xml:space="preserve">
    <value>Save Dump as</value>
  </data>
  <data name="SaveKeyFile" xml:space="preserve">
    <value>Save Key File</value>
  </data>
  <data name="ScanFinished" xml:space="preserve">
    <value>scan finished</value>
  </data>
  <data name="Sector" xml:space="preserve">
    <value>Sector</value>
  </data>
  <data name="SelectKeyFilesWindowTitle" xml:space="preserve">
    <value>Key Files</value>
  </data>
  <data name="ShowAsASCII" xml:space="preserve">
    <value>Show as ASCII</value>
  </data>
  <data name="ShowAsHex" xml:space="preserve">
    <value>Show as Hex</value>
  </data>
  <data name="StartCloning" xml:space="preserve">
    <value>Start Cloning</value>
  </data>
  <data name="Started" xml:space="preserve">
    <value>started</value>
  </data>
  <data name="TargetDump" xml:space="preserve">
    <value>Blank tag dump file:</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>TOOLS / OPTIONS</value>
  </data>
  <data name="UsedForSourceMapping" xml:space="preserve">
    <value>(used to generate source tag mapping)</value>
  </data>
  <data name="UsedForTargetMapping" xml:space="preserve">
    <value>(used to generate target tag mapping)</value>
  </data>
  <data name="WriteDumpClone" xml:space="preserve">
    <value>Write Dump (Clone)</value>
  </data>
  <data name="WriteDumpWindowTitle" xml:space="preserve">
    <value>Write Tag</value>
  </data>
  <data name="WriteTag" xml:space="preserve">
    <value>WRITE TAG</value>
  </data>
  <data name="DecryptTagTitle" xml:space="preserve">
    <value>Decrypt tag</value>
  </data>
  <data name="ErrorHandling" xml:space="preserve">
    <value>Error Handling</value>
  </data>
  <data name="Keys" xml:space="preserve">
    <value>Keys</value>
  </data>
  <data name="NeedSelectDumpKeyFileSourceAndTarget" xml:space="preserve">
    <value>You must select a source MWT file and a MWT file corresponding to the target badge</value>
  </data>
  <data name="NeedSelectDumpKeyFileTarget" xml:space="preserve">
    <value>You need to select one target dump</value>
  </data>
  <data name="Tag" xml:space="preserve">
    <value>Tag</value>
  </data>
  <data name="TagType" xml:space="preserve">
    <value>Tag Type</value>
  </data>
  <data name="ttAcsDefaultValue" xml:space="preserve">
    <value>FF078069 is the default value</value>
  </data>
  <data name="btnChangeUID" xml:space="preserve">
    <value>Change UID</value>
  </data>
  <data name="btnCompareDumps" xml:space="preserve">
    <value>Compare dumps</value>
  </data>
  <data name="InvalidDumpFile" xml:space="preserve">
    <value>Invalid dump file</value>
  </data>
  <data name="SelectToolWindowTitle" xml:space="preserve">
    <value>Tools / Options</value>
  </data>
  <data name="SetUIDWindowTitle" xml:space="preserve">
    <value>Set new tag UID</value>
  </data>
  <data name="InvalidUID" xml:space="preserve">
    <value>Invalid UID (4 bytes = 8 hex digits) or BLOCK 0 (16 bytes - 32 hex digits)</value>
  </data>
  <data name="NewUID" xml:space="preserve">
    <value>New UID</value>
  </data>
  <data name="OldUID" xml:space="preserve">
    <value>Old UID</value>
  </data>
  <data name="Source" xml:space="preserve">
    <value>source</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>target</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="FormatTag" xml:space="preserve">
    <value>Format tag</value>
  </data>
  <data name="French" xml:space="preserve">
    <value>French</value>
  </data>
  <data name="ACR122NotPlugged" xml:space="preserve">
    <value>ACR122U tag reader doesn't seem to be plugged in!</value>
  </data>
  <data name="DriverACR122NotInstalled" xml:space="preserve">
    <value>ACR122U Tag reader driver doesn't seem to be installed.
Click OK to be redirected on the driver download page.
Install driver last version named 'MSI Installer for PC / SC Driver'</value>
  </data>
  <data name="DriverLibUsbKNonInstalled" xml:space="preserve">
    <value>ACR122U seems to be installed but, NOT the LibUsbK driver.
Click OK to install it</value>
  </data>
  <data name="thisismctdumpfile" xml:space="preserve">
    <value>This file looks like a MCT (Mifare classic tool) dump. Do you want to try to convert it automatically to MWT dump?</value>
  </data>
  <data name="BadgeReaderAcr122NotFound" xml:space="preserve">
    <value>The tag reader cannot be found!</value>
  </data>
  <data name="BadgeUIDAlreadyknown" xml:space="preserve">
    <value>This tag identifier is already known by MWT. 
Read anyway ? (If this is a new or recently modified tag on your reader, prefer 'Yes')</value>
  </data>
  <data name="lblChooseKeyFileContent" xml:space="preserve">
    <value>Select keys to access tag content</value>
  </data>
  <data name="InfoMessageTagToReadAndDecode" xml:space="preserve">
    <value>This tag is not know yet.
Mifare Windows tool needs to read and decrypt it once
(even if it's a blank tag), in order to be able to write something on it.
In the next window, you will be able to read and decode your tag</value>
  </data>
  <data name="btnReinstallLibUsbK" xml:space="preserve">
    <value>Reinstall libUsbk Driver wrapper</value>
  </data>
  <data name="UseInstallDriverIf" xml:space="preserve">
    <value>Use this if your ACR122U has a red LED - with mandatory installed libUSBK driver ,the led should remain OFF (no red light). 
After installing this driver, unplug and replug your ACR122U</value>
  </data>
  <data name="LabelDumpsPath" xml:space="preserve">
    <value>Default dump path</value>
  </data>
  <data name="Browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="LabelKeysPath" xml:space="preserve">
    <value>Default Keys path</value>
  </data>
  <data name="SaveDumpKeysAs" xml:space="preserve">
    <value>Save dump keys as</value>
  </data>
  <data name="AppendDumpKeysTo" xml:space="preserve">
    <value>Append keys to existing file</value>
  </data>
  <data name="btnConvertDump" xml:space="preserve">
    <value>Dump conversion</value>
  </data>
  <data name="PauseOff" xml:space="preserve">
    <value>Suspend display</value>
  </data>
  <data name="PauseOn" xml:space="preserve">
    <value>Resume display</value>
  </data>
  <data name="thisisflipperdumpfile" xml:space="preserve">
    <value>This file looks like a Flipper Zero dump. Do you want to try to convert it automatically to MWT dump?</value>
  </data>
  <data name="ConvertToMctOrFlipperDump" xml:space="preserve">
    <value>Select Yes to convert this dump to Mct Dump, Or No to convert it to Flipper Dump, Or cancel</value>
  </data>
  <data name="BtnConvert" xml:space="preserve">
    <value>Convert</value>
  </data>
  <data name="InputDumpType" xml:space="preserve">
    <value>Type de Dump Source</value>
  </data>
  <data name="OutputDumpType" xml:space="preserve">
    <value>Convert to which type of dump?</value>
  </data>
  <data name="TagGensInfo" xml:space="preserve">
    <value>Thanks to Blogmotion: https://blogmotion.fr/internet/securite/gen1-gen2-gen3-nfc-mifare-1k-18004

[GENERATION 1] Modifiable UID:
UID can be changed multiple times: yes
All blocks can be written multiple times, including block 0
Compatible with USB drive and libNFC: yes
MCT compatible: yes, except block 0
Backdoor to rewrite regardless of ACs (magic commands): yes (Gen 1a)
Detectable as a copy: yes, because of magic commands

[GENERATION 2] CUID :
All blocks can be written multiple times, including block 0
Compatible with USB drive and libNFC: yes
Backdoor to rewrite regardless of ACs (magic commands): no
Detectable as a copy : hardly (does not respond to magic commands)
Particularity : sudden death if writing an invalid block 0

[GENERATION 2] FUID :
Block 0 can be written only once
All blocks can be written several times, except block 0
Special feature: protection against sudden death if invalid block 0 is written
Backdoor to rewrite regardless of ACs (magic commands) : no
Detectable as a copy : very difficult (does not respond to magic commands)</value>
  </data>
  <data name="SelectDumpForSourceTag" xml:space="preserve">
    <value>Choose the MWT dump file corresponding to the content of the badge to be copied (source)</value>
  </data>
  <data name="SelectDumpForTargetTag" xml:space="preserve">
    <value>Choose the MWT dump file corresponding to the content of the blank badge (target)</value>
  </data>
  <data name="SourceDump" xml:space="preserve">
    <value>dump file of tag to copy:</value>
  </data>
  <data name="ReadTargetMoreInfos" xml:space="preserve">
    <value>Note: before copying a badge, MWT must still know (i.e. decrypt) the badge you are going to copy to, even if it is a blank badge.</value>
  </data>
  <data name="SaveDump" xml:space="preserve">
    <value>Save dump</value>
  </data>
  <data name="NothingToSave" xml:space="preserve">
    <value>Nothing to save</value>
  </data>
  <data name="SourceAndCopyAreTheSame" xml:space="preserve">
    <value>Source and Copy are the same</value>
  </data>
  <data name="WantSourceAndCopyTheSame" xml:space="preserve">
    <value>You are about to copy identical content between the source and the target, are you sure this is what you want?
(If not, select another source file to copy )</value>
  </data>
  <data name="BtnRenameKeyFileContent" xml:space="preserve">
    <value>Rename key file</value>
  </data>
  <data name="InvalidCharsInFileName" xml:space="preserve">
    <value>Invalid chars in file name</value>
  </data>
  <data name="NameAlreadyExisting" xml:space="preserve">
    <value>This file name already exists</value>
  </data>
  <data name="ConfirmDeleteFile" xml:space="preserve">
    <value>Are you sure you want to delete this file?</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="FillEmptyWithDefault" xml:space="preserve">
    <value>Complete the dump with default values if the dump is partial</value>
  </data>
  <data name="NewUIDOrBlock0" xml:space="preserve">
    <value>New UID (4 bytes) or full BLOCK 0 (16 bytes)</value>
  </data>
  <data name="MissingMandatoryExeFiles" xml:space="preserve">
    <value>Some mandatory executable files are missing.
MWT may not run properly.
Please check if your antivirus has not blocked some files after MWT install.
Missing file(s) in </value>
  </data>
  <data name="MissingExeFile" xml:space="preserve">
    <value>Following file is missing: {1} in folder {0}
MWT cannot run properly.
Please check if your antivirus has not blocked this file after MWT install.</value>
  </data>
  <data name="GoOnGitHubPage" xml:space="preserve">
    <value>Do you want to go on github page? </value>
  </data>
  <data name="GoOnGitHubPageBeta" xml:space="preserve">
    <value>Do you want to go on github prerelease version page (Yes) or stable version page (No) or Cancel ? </value>
  </data>
  <data name="NewerBetaVersionExists" xml:space="preserve">
    <value>A newer prerelease version exists.</value>
  </data>
  <data name="NewerVersionExists" xml:space="preserve">
    <value>A newer version exists.</value>
  </data>
  <data name="UnInstallLibUsbKDriver" xml:space="preserve">
    <value>The LibUsbK driver has been detected and should be uninstalled.
Click on 'OK' to try to uninstall it.
Then, unplug and replug the drive.
If the LED on the drive is lit, the uninstallation was successful, otherwise try to uninstall the LibusbK driver manually.</value>
  </data>
  <data name="ACR122StatusStopped" xml:space="preserve">
    <value>The ACR122 reader is detected but stopped.
Try unplugging and replugging it, then restarting MWT.</value>
  </data>
  <data name="GetInfoForManualDriverUninstall" xml:space="preserve">
    <value>The LibUsbK driver could not be uninstalled automatically.
Do you want to display the help page to uninstall it manually?</value>
  </data>
</root>